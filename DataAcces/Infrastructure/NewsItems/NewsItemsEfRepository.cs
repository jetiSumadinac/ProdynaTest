using DataAcces.DataModels;
using DataAcces.Infrastructure.Autors;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace DataAcces.Infrastructure.NewsItems
{
    public class NewsItemsEfRepository : BaseRepository<DataModels.NewsItems>, INewsItemsEfRepository
    {
        private readonly ProdynaTestDbContext _context;
        private readonly IAuthorsEfRepository _authorsEfRepository;
        public NewsItemsEfRepository(ProdynaTestDbContext prodynaTestDbContext, IAuthorsEfRepository authorsEfRepository)
        {
            _context = prodynaTestDbContext;
            _authorsEfRepository = authorsEfRepository;
        }
        public async Task<int> DeleteAsync(Guid data)
        {
            var entity = await _context.NewsItems.FirstOrDefaultAsync(e => e.Id == data);
            _context.NewsItems.Remove(entity);

            return await _context.SaveChangesAsync();
        }

        public Task<Guid> EditAsync(DataModels.NewsItems data)
        {
            throw new NotImplementedException();
        }

        public async Task<DataModels.NewsItems> GetSingleAsync(Expression<Func<DataModels.NewsItems, bool>> query)
        {
            return await GetEntities().FirstOrDefaultAsync(query);
        }

        public async Task<Guid> InsertAsync(DataModels.NewsItems data)
        {
            int result;
            var entity = new DataModels.NewsItems();
            entity.Category = data.Category;
            entity.CreatedTimestamp = data.CreatedTimestamp;
            entity.Description = data.Description;
            entity.AuthorId = data.AuthorId;
            //TODO: should Id be generated by database or by backend API
            
            _context.NewsItems.Add(entity);
            await _context.SaveChangesAsync();

            return entity.Id; //TODO: we might have an exception here because Guid is not generated yet
        }

        protected override IQueryable<DataModels.NewsItems> GetEntities()
        {
            return _context.NewsItems;
        }
    }
}
